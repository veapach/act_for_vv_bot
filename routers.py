from aiogram import Router
from aiogram.types import Message, ReplyKeyboardMarkup, KeyboardButton
from aiogram import F
from config import user_photos, user_data, log_message
from document_generator import generate_document
from aiogram.types import FSInputFile
import os

done_button = KeyboardButton(text="–ì–æ—Ç–æ–≤–æ ‚úÖ")
keyboard = ReplyKeyboardMarkup(keyboard=[[done_button]], resize_keyboard=True)

router = Router()


@router.message(F.text == "/start")
async def start_handler(message: Message):
    await message.reply(
        "–ü—Ä–∏–≤–µ—Ç! –û—Ç–ø—Ä–∞–≤—å –º–Ω–µ –Ω–µ—Å–∫–æ–ª—å–∫–æ —Ñ–æ—Ç–æ, –∏ —è –≤—Å—Ç–∞–≤–ª—é –∏—Ö –≤ –æ—Ç—á–µ—Ç. –ö–æ–≥–¥–∞ –∑–∞–∫–æ–Ω—á–∏—à—å, –Ω–∞–∂–º–∏ –∫–Ω–æ–ø–∫—É <b>–ì–æ—Ç–æ–≤–æ</b>.",
        parse_mode="HTML",
    )
    log_message("üë§ –ó–∞–ø—Ä–æ—Å –æ—Ç –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è", message)


@router.message(F.photo)
async def photo_handler(message: Message):
    user_id = message.from_user.id

    if user_id not in user_photos:
        user_photos[user_id] = []

    highest_quality_photo = max(message.photo, key=lambda p: p.file_size)
    user_photos[user_id].append(highest_quality_photo.file_id)

    if len(user_photos[user_id]) == 1:
        await message.reply(
            "üì∏ –§–æ—Ç–æ –ø–æ–ª—É—á–µ–Ω–æ! –û—Ç–ø—Ä–∞–≤—å –µ—â—ë –∏–ª–∏ –Ω–∞–∂–º–∏ –∫–Ω–æ–ø–∫—É <b>–ì–æ—Ç–æ–≤–æ</b>, —á—Ç–æ–±—ã –∑–∞–≤–µ—Ä—à–∏—Ç—å.",
            reply_markup=keyboard,
            parse_mode="HTML",
        )
        log_message("üì∑ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ—Ç–ø—Ä–∞–≤–∏–ª —Ñ–æ—Ç–æ", message)


@router.message(F.text == "–ì–æ—Ç–æ–≤–æ ‚úÖ")
async def done_handler(message: Message):
    user_id = message.from_user.id

    if user_id not in user_photos or not user_photos[user_id]:
        await message.reply(
            "‚ö†Ô∏è –í—ã –µ—â—ë –Ω–µ –æ—Ç–ø—Ä–∞–≤–∏–ª–∏ –Ω–∏ –æ–¥–Ω–æ–π —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏.", parse_mode="HTML"
        )
        return

    await message.reply(
        "üìÖ –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ –î–î.–ú–ú.–ì–ì–ì–ì:", parse_mode="HTML"
    )
    log_message("üñºÔ∏è –§–æ—Ç–æ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã", message)

    user_data[user_id] = {"photos": user_photos[user_id]}


@router.message(F.text.regexp(r"\d{2}\.\d{2}\.\d{4}"))
async def date_handler(message: Message):
    user_id = message.from_user.id

    if user_id not in user_data:
        await message.reply(
            "‚ö†Ô∏è –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–Ω–∞—á–∞–ª–∞ –Ω–∞–∂–º–∏—Ç–µ '–ì–æ—Ç–æ–≤–æ ‚úÖ'.", parse_mode="HTML"
        )
        return

    user_data[user_id]["date"] = message.text
    await message.reply("üìç –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∞–¥—Ä–µ—Å:", parse_mode="HTML")
    log_message("üìÖ –î–∞—Ç–∞ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞", message)


@router.message(F.text)
async def address_handler(message: Message):
    user_id = message.from_user.id

    if user_id not in user_data or "date" not in user_data[user_id]:
        return

    user_data[user_id]["address"] = message.text
    await message.reply("üìù –°–æ–∑–¥–∞—é –¥–æ–∫—É–º–µ–Ω—Ç, –ø–æ–¥–æ–∂–¥–∏—Ç–µ –Ω–µ–º–Ω–æ–≥–æ...", parse_mode="HTML")
    log_message(
        "üìç –ê–¥—Ä–µ—Å –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω, –Ω–∞—á–∞–ª–∞—Å—å –æ–±—Ä–∞–±–æ—Ç–∫–∞ –¥–æ–∫—É–º–µ–Ω—Ç–∞", message
    )

    try:
        output_file = await generate_document(user_id, user_data[user_id])

        await message.answer_document(FSInputFile(output_file))
        log_message("üìÑ –ì–æ—Ç–æ–≤—ã–π –æ—Ç—á–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é", message)

        os.remove(output_file)
        del user_photos[user_id]
        del user_data[user_id]
    except Exception as e:
        await message.reply(f"‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {e}", parse_mode="HTML")
