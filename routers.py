import re
from aiogram import Router, F, types
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.types import (
    Message,
    ReplyKeyboardMarkup,
    KeyboardButton,
    InlineKeyboardMarkup,
    InlineKeyboardButton,
)
from config import user_photos, user_data, log_message
from document_generator import generate_document
from aiogram.types import FSInputFile
from database import db
import os
from datetime import datetime, timedelta

router = Router()


class UserForm(StatesGroup):
    waiting_for_last_name = State()
    waiting_for_first_name = State()
    waiting_for_photos = State()
    waiting_for_date = State()
    waiting_for_address = State()
    waiting_for_classification = State()
    waiting_for_classification_input = State()
    waiting_for_materials = State()
    waiting_for_recommendations = State()
    waiting_for_defects = State()
    checklist = State()
    waiting_for_additional_works = State()
    waiting_for_start_date = State()
    waiting_for_end_date = State()
    waiting_for_address_search = State()


new_report_button = KeyboardButton(text="üìù –ù–æ–≤—ã–π –æ—Ç—á–µ—Ç")
view_reports_button = KeyboardButton(text="üìä –ü—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å –æ—Ç—á–µ—Ç—ã")
done_button = KeyboardButton(text="‚úÖ –ì–æ—Ç–æ–≤–æ")
cancel_button = KeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞")

main_keyboard = ReplyKeyboardMarkup(
    keyboard=[[new_report_button], [view_reports_button]], resize_keyboard=True
)
report_keyboard = ReplyKeyboardMarkup(
    keyboard=[[done_button, cancel_button]], resize_keyboard=True
)


async def delete_and_update(message: Message, user_id: int):
    try:
        await message.delete()
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
    await update_report_message(message, user_id)


WORKS_LIST = [
    "–ï–∂–µ–º–µ—Å—è—á–Ω—ã–π —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–π –æ—Å–º–æ—Ç—Ä –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏—è –Ω–∞ –ø—Ä–µ–¥–º–µ—Ç –µ–≥–æ —Ä–∞–±–æ—Ç–æ—Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–∏.",
    "–¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏–π –æ—Å–º–æ—Ç—Ä –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏—è –Ω–∞ –ø—Ä–µ–¥–º–µ—Ç –µ–≥–æ —Ä–∞–±–æ—Ç–æ—Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–∏.",
    "–î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –Ω–µ–∏—Å–ø—Ä–∞–≤–Ω–æ–≥–æ –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏—è –Ω–∞ –ø—Ä–µ–¥–º–µ—Ç –ø—Ä–æ–≤–µ–¥–µ–Ω–∏—è –µ–≥–æ —Ä–µ–º–æ–Ω—Ç–∞.",
    "–î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏—è",
    "–ü—Ä–æ–≤–µ—Ä–∫–∞ –∫—Ä–µ–ø–ª–µ–Ω–∏—è —Ç–µ—Ä–º–æ—Å—Ç–∞—Ç–æ–≤, —Å–∏–≥–Ω–∞–ª—å–Ω–æ–π –∞—Ä–º–∞—Ç—É—Ä—ã, –¥–≤–µ—Ä–µ–π –∏ –æ–±–ª–∏—Ü–æ–≤–∫–∏.",
    "–ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–¥–µ–∂–Ω–æ—Å—Ç–∏ –∫—Ä–µ–ø–ª–µ–Ω–∏—è –∑–∞–∑–µ–º–ª–µ–Ω–∏—è –∏ –æ—Ç—Å—É—Ç—Å—Ç–≤–∏—è –º–µ—Ö–∞–Ω–∏—á–µ—Å–∫–∏—Ö –ø–æ–≤—Ä–µ–∂–¥–µ–Ω–∏–π –ø—Ä–æ–≤–æ–¥–æ–≤.",
    "–ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–±–æ—Ç—ã –ø—Ä–æ–≥—Ä–∞–º–º–Ω—ã—Ö —É—Å—Ç—Ä–æ–π—Å—Ç–≤.",
    "–ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–≥—Ä–µ–≤–∞—Ç–µ–ª—å–Ω—ã—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤.",
    "–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ–ª–µ–Ω–æ–∏–¥–Ω—ã—Ö –∫–ª–∞–ø–∞–Ω–æ–≤.",
    "–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è —ç–ª–µ–∫—Ç—Ä–æ–∞–ø–ø–∞—Ä–∞—Ç—É—Ä—ã, –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏ –∑–∞—Ç—è–∂–∫–∞ —ç–ª–µ–∫—Ç—Ä–æ–∫–æ–Ω—Ç–∞–∫—Ç–Ω—ã—Ö —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π, –∑–∞–º–µ–Ω–∞ —Å–≥–æ—Ä–µ–≤—à–∏—Ö –ø–ª–∞–≤–∫–∏—Ö –≤—Å—Ç–∞–≤–æ–∫.",
    "–ö–æ–Ω—Ç—Ä–æ–ª—å —Å–∏–ª—ã —Ç–æ–∫–∞ –≤ –∫–∞–∂–¥–æ–π –∏–∑ —Ñ–∞–∑ –∏ –º–µ–∂—Ñ–∞–∑–Ω—ã—Ö –Ω–∞–ø—Ä—è–∂–µ–Ω–∏–π.",
    "–ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –º–∏–∫—Ä–æ–ø—Ä–æ—Ü–µ—Å—Å–æ—Ä–æ–≤",
    "–ö–æ–Ω—Ç—Ä–æ–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –∞–≥—Ä–µ–≥–∞—Ç–∞ –≤ —Ä–∞–±–æ—á–µ–º —Ä–µ–∂–∏–º–µ.",
]


def get_report_keyboard(user_id):
    data = user_data.get(user_id, {})
    buttons = [
        [
            InlineKeyboardButton(
                text=f"{'‚úÖ' if 'photos' in data else '‚ùå'} –§–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏",
                callback_data="upload_photos",
            )
        ],
        [
            InlineKeyboardButton(
                text=f"{'‚úÖ' if 'date' in data else '‚ùå'} –î–∞—Ç–∞",
                callback_data="upload_date",
            )
        ],
        [
            InlineKeyboardButton(
                text=f"{'‚úÖ' if 'address' in data else '‚ùå'} –ê–¥—Ä–µ—Å",
                callback_data="upload_address",
            )
        ],
        [
            InlineKeyboardButton(
                text=f"{'‚úÖ' if 'classification' in data else '‚ùå'} –ö–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏—è",
                callback_data="upload_classification",
            )
        ],
        [
            InlineKeyboardButton(
                text=f"{'‚úÖ' if 'materials' in data else '‚ùå'} –ú–∞—Ç–µ—Ä–∏–∞–ª—ã",
                callback_data="upload_materials",
            )
        ],
        [
            InlineKeyboardButton(
                text=f"{'‚úÖ' if 'recommendations' in data else '‚ùå'} –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏",
                callback_data="upload_recommendations",
            )
        ],
        [
            InlineKeyboardButton(
                text=f"{'‚úÖ' if 'defects' in data else '‚ùå'} –î–µ—Ñ–µ–∫—Ç—ã",
                callback_data="upload_defects",
            )
        ],
        [
            InlineKeyboardButton(
                text=f"{'‚úÖ' if 'works' in data else '‚ùå'} –ß–µ–∫-–ª–∏—Å—Ç —Ä–∞–±–æ—Ç",
                callback_data="upload_works",
            )
        ],
        [
            InlineKeyboardButton(
                text=f"{'‚úÖ' if 'additional_works' in data else '‚ùå'} –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —Ä–∞–±–æ—Ç—ã",
                callback_data="upload_additional_works",
            )
        ],
    ]

    return InlineKeyboardMarkup(inline_keyboard=buttons)


async def update_report_message(message: Message, user_id: int):
    await message.answer(
        "üìã –°–æ–∑–¥–∞–Ω–∏–µ –æ—Ç—á–µ—Ç–∞\n–í—ã–±–µ—Ä–∏—Ç–µ, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –∑–∞–ø–æ–ª–Ω–∏—Ç—å:",
        reply_markup=get_report_keyboard(user_id),
        parse_mode="HTML",
    )


@router.message(F.text == "/start")
async def start_handler(message: Message, state: FSMContext):
    user_id = message.from_user.id

    user = await db.get_user(user_id)
    if user:
        first_name, last_name = user
        await message.reply(
            f"–° –≤–æ–∑–≤—Ä–∞—â–µ–Ω–∏–µ–º, {first_name} {last_name}! –ù–∞–∂–º–∏ –∫–Ω–æ–ø–∫—É üìù –ù–æ–≤—ã–π –æ—Ç—á–µ—Ç, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å.",
            reply_markup=main_keyboard,
            parse_mode="HTML",
        )
        return

    await state.set_state(UserForm.waiting_for_last_name)
    await message.reply("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à—É —Ñ–∞–º–∏–ª–∏—é:")


@router.message(UserForm.waiting_for_last_name)
async def last_name_handler(message: Message, state: FSMContext):
    user_id = message.from_user.id
    last_name = message.text.strip()

    if not last_name.isalpha():
        await message.reply("‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é —Ñ–∞–º–∏–ª–∏—é.")
        return

    await state.update_data(last_name=last_name)
    await state.set_state(UserForm.waiting_for_first_name)
    await message.reply("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –∏–º—è:")


@router.message(UserForm.waiting_for_first_name)
async def first_name_handler(message: Message, state: FSMContext):
    user_id = message.from_user.id
    first_name = message.text.strip()

    if not first_name.isalpha():
        await message.reply("‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∏–º—è.")
        return

    user_data_state = await state.get_data()
    last_name = user_data_state.get("last_name")

    await db.add_user(user_id, first_name=first_name, last_name=last_name)

    await log_message(
        "–ù–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å", user=f"{first_name} {last_name} (ID: {user_id})"
    )

    await message.reply(
        f"–ü—Ä–∏–≤–µ—Ç, {first_name} {last_name}! –ù–∞–∂–º–∏ –∫–Ω–æ–ø–∫—É üìù –ù–æ–≤—ã–π –æ—Ç—á–µ—Ç, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å.",
        reply_markup=main_keyboard,
        parse_mode="HTML",
    )

    await state.clear()


@router.message(F.text == "üìù –ù–æ–≤—ã–π –æ—Ç—á–µ—Ç")
async def new_report_handler(message: Message, state: FSMContext):
    user_id = message.from_user.id

    user_record = await db.get_user(user_id)
    if not user_record:
        await message.reply(
            "‚ùå –í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /start –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏."
        )
        await state.set_state(UserForm.waiting_for_last_name)
        return

    username = (
        message.from_user.username or f"{message.from_user.first_name} (ID: {user_id})"
    )
    await log_message("–ù–∞—á–∞–ª —Å–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –æ—Ç—á–µ—Ç–∞", user=username)
    user_data[user_id] = {}
    user_photos[user_id] = []
    await message.answer(
        "–°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –æ—Ç—á–µ—Ç–∞ –Ω–∞—á–∞—Ç–æ. –í—ã–±–µ—Ä–∏—Ç–µ, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –∑–∞–ø–æ–ª–Ω–∏—Ç—å:",
        reply_markup=report_keyboard,
    )
    await update_report_message(message, user_id)


@router.message(F.text == "‚ùå –û—Ç–º–µ–Ω–∞")
async def cancel_report_handler(message: Message):
    user_id = message.from_user.id
    if user_id in user_data:
        del user_data[user_id]
    if user_id in user_photos:
        del user_photos[user_id]
    await message.answer("–°–æ–∑–¥–∞–Ω–∏–µ –æ—Ç—á–µ—Ç–∞ –æ—Ç–º–µ–Ω–µ–Ω–æ", reply_markup=main_keyboard)


@router.message(F.text == "‚úÖ –ì–æ—Ç–æ–≤–æ")
async def done_button_handler(message: Message, state: FSMContext):
    user_id = message.from_user.id

    user_record = await db.get_user(user_id)
    if not user_record:
        await message.reply(
            "‚ùå –í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /start –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏."
        )
        await state.set_state(UserForm.waiting_for_last_name)
        return

    required_fields = [
        "date",
        "address",
        "classification",
        "materials",
        "recommendations",
        "defects",
        "works",
    ]
    missing_fields = [
        field for field in required_fields if field not in user_data.get(user_id, {})
    ]

    if missing_fields:
        missing_text = ", ".join(missing_fields)
        await message.answer(f"‚ùå –ù–µ–æ–±—Ö–æ–¥–∏–º–æ –∑–∞–ø–æ–ª–Ω–∏—Ç—å: {missing_text}")
        return

    await message.answer("üìù –°–æ–∑–¥–∞—é –¥–æ–∫—É–º–µ–Ω—Ç, –ø–æ–¥–æ–∂–¥–∏—Ç–µ –Ω–µ–º–Ω–æ–≥–æ...")
    await process_document(message, state, user_id)


@router.callback_query(F.data.startswith("upload_"))
async def upload_handler(callback: types.CallbackQuery, state: FSMContext):
    action = callback.data.split("_", 1)[1]
    user = callback.from_user
    username = user.username or f"{user.first_name} (ID: {user.id})"
    log_text = f"–ù–∞—á–∞–ª –∑–∞–ø–æ–ª–Ω–µ–Ω–∏–µ {action}"
    await log_message(log_text, user=username)

    if action in user_data.get(user.id, {}):
        if action == "photos":
            user_photos[user.id] = []
        else:
            user_data[user.id][action] = None

    messages_map = {
        "photos": "üì∏ –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ –¥–ª—è –æ—Ç—á–µ—Ç–∞ (–º–æ–∂–Ω–æ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ). –ü–æ—Å–ª–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –ì–æ—Ç–æ–≤–æ",
        "date": "üìÖ –í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ –î–î.–ú–ú.–ì–ì–ì–ì",
        "address": "üìç –í–≤–µ–¥–∏—Ç–µ –∞–¥—Ä–µ—Å",
        "classification": "üè∑Ô∏è –í—ã–±–µ—Ä–∏—Ç–µ –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏—é",
        "materials": "üõ†Ô∏è –í–≤–µ–¥–∏—Ç–µ –º–∞—Ç–µ—Ä–∏–∞–ª—ã –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ –ü—Ä–æ–ø—É—Å–∫",
        "recommendations": "üí° –í–≤–µ–¥–∏—Ç–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ –ü—Ä–æ–ø—É—Å–∫",
        "defects": "üîç –í–≤–µ–¥–∏—Ç–µ –≤—ã—è–≤–ª–µ–Ω–Ω—ã–µ –¥–µ—Ñ–µ–∫—Ç—ã –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ –ü—Ä–æ–ø—É—Å–∫",
        "works": "üìã –ó–∞–ø–æ–ª–Ω–∏—Ç–µ —á–µ–∫-–ª–∏—Å—Ç —Ä–∞–±–æ—Ç",
        "additional_works": "üîß –í–≤–µ–¥–∏—Ç–µ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —Ä–∞–±–æ—Ç—ã –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ –ü—Ä–æ–ø—É—Å–∫",
    }

    states_map = {
        "photos": UserForm.waiting_for_photos,
        "date": UserForm.waiting_for_date,
        "address": UserForm.waiting_for_address,
        "classification": UserForm.waiting_for_classification,
        "materials": UserForm.waiting_for_materials,
        "recommendations": UserForm.waiting_for_recommendations,
        "defects": UserForm.waiting_for_defects,
        "works": UserForm.checklist,
        "additional_works": UserForm.waiting_for_additional_works,
    }

    skip_keyboard = InlineKeyboardMarkup(
        inline_keyboard=[[InlineKeyboardButton(text="–ü—Ä–æ–ø—É—Å–∫", callback_data="skip")]]
    )

    if action == "works":
        await start_checklist(callback, state)
        return

    await state.set_state(states_map[action])

    reply_markup = None

    if action == "photos":
        done_keyboard = InlineKeyboardMarkup(
            inline_keyboard=[
                [InlineKeyboardButton(text="‚úÖ –ì–æ—Ç–æ–≤–æ", callback_data="photos_done")]
            ]
        )
        reply_markup = done_keyboard
    elif action == "classification":
        classification_keyboard = InlineKeyboardMarkup(
            inline_keyboard=[
                [InlineKeyboardButton(text="–ü–ù–†", callback_data="classification_pnr")],
                [
                    InlineKeyboardButton(
                        text="–ê–≤–∞—Ä–∏–π–Ω—ã–π –≤—ã–∑–æ–≤", callback_data="classification_emergency"
                    )
                ],
                [
                    InlineKeyboardButton(
                        text="–¢–û", callback_data="classification_maintenance"
                    )
                ],
                [
                    InlineKeyboardButton(
                        text="–î—Ä—É–≥–æ–µ", callback_data="classification_other"
                    )
                ],
            ]
        )
        reply_markup = classification_keyboard
    elif action in ["materials", "recommendations", "defects", "additional_works"]:
        reply_markup = skip_keyboard

    await callback.message.edit_text(
        messages_map[action], reply_markup=reply_markup, parse_mode="HTML"
    )


@router.callback_query(F.data.startswith("classification_"))
async def handle_classification_selection(
    callback: types.CallbackQuery, state: FSMContext
):
    user_id = callback.from_user.id
    action = callback.data.split("_", 1)[1]

    if action == "other":
        await state.set_state(UserForm.waiting_for_classification_input)
        cancel_keyboard = InlineKeyboardMarkup(
            inline_keyboard=[
                [
                    InlineKeyboardButton(
                        text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="classification_cancel_input"
                    )
                ]
            ]
        )
        await callback.message.edit_text(
            "–í–≤–µ–¥–∏—Ç–µ —Å–≤–æ—é –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏—é:", reply_markup=cancel_keyboard
        )
    else:
        classification_text = {
            "pnr": "–ü–ù–†",
            "emergency": "–ê–≤–∞—Ä–∏–π–Ω—ã–π –≤—ã–∑–æ–≤",
            "maintenance": "–¢–û",
        }.get(action, action)

        user_data[user_id]["classification"] = classification_text
        await delete_and_update(callback.message, user_id)
        await state.clear()
        await callback.answer()


@router.callback_query(F.data == "classification_cancel_input")
async def handle_classification_cancel(
    callback: types.CallbackQuery, state: FSMContext
):
    await state.clear()
    classification_keyboard = InlineKeyboardMarkup(
        inline_keyboard=[
            [InlineKeyboardButton(text="–ü–ù–†", callback_data="classification_pnr")],
            [
                InlineKeyboardButton(
                    text="–ê–≤–∞—Ä–∏–π–Ω—ã–π –≤—ã–∑–æ–≤", callback_data="classification_emergency"
                )
            ],
            [
                InlineKeyboardButton(
                    text="–¢–û", callback_data="classification_maintenance"
                )
            ],
            [InlineKeyboardButton(text="–î—Ä—É–≥–æ–µ", callback_data="classification_other")],
        ]
    )
    await callback.message.edit_text(
        "üè∑Ô∏è –í—ã–±–µ—Ä–∏—Ç–µ –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏—é:", reply_markup=classification_keyboard
    )
    await callback.answer()


@router.message(UserForm.waiting_for_classification_input)
async def handle_custom_classification_input(message: Message, state: FSMContext):
    user_id = message.from_user.id
    user_data[user_id]["classification"] = message.text
    await delete_and_update(message, user_id)
    await state.clear()


@router.message(UserForm.waiting_for_photos)
async def photo_handler(message: Message, state: FSMContext):
    user_id = message.from_user.id
    username = (
        message.from_user.username
        or f"{message.from_user.first_name} (ID: {message.from_user.id})"
    )

    if not message.photo and not message.document:
        await message.reply("‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é")
        return

    if user_id not in user_photos:
        user_photos[user_id] = []

    file_id = None
    if message.photo:
        highest_quality_photo = max(message.photo, key=lambda p: p.file_size)
        file_id = highest_quality_photo.file_id
    elif message.document and message.document.mime_type.startswith("image/"):
        file_id = message.document.file_id
    else:
        await message.reply("‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ")
        return

    user_photos[user_id].append(file_id)
    user_data[user_id]["photos"] = user_photos[user_id]

    media_group_id = message.media_group_id
    if not media_group_id or len(user_photos[user_id]) == 1:
        done_keyboard = InlineKeyboardMarkup(
            inline_keyboard=[
                [InlineKeyboardButton(text="‚úÖ –ì–æ—Ç–æ–≤–æ", callback_data="photos_done")]
            ]
        )
        await message.reply(
            "üì∏ –§–æ—Ç–æ –¥–æ–±–∞–≤–ª–µ–Ω–æ! –û—Ç–ø—Ä–∞–≤—å—Ç–µ –µ—â–µ –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ –ì–æ—Ç–æ–≤–æ",
            reply_markup=done_keyboard,
        )

    await log_message(f"–î–æ–±–∞–≤–∏–ª —Ñ–æ—Ç–æ", user=username)


@router.callback_query(F.data == "photos_done")
async def photos_done_handler(callback: types.CallbackQuery, state: FSMContext):
    user_id = callback.from_user.id
    username = (
        callback.from_user.username
        or f"{callback.from_user.first_name} (ID: {callback.from_user.id})"
    )

    user_data[user_id]["photos"] = user_photos.get(user_id, [])

    await log_message("–ó–∞–≤–µ—Ä—à–∏–ª –∑–∞–≥—Ä—É–∑–∫—É —Ñ–æ—Ç–æ", user=username)
    await delete_and_update(callback.message, user_id)
    await state.clear()
    await callback.answer()


@router.message(UserForm.waiting_for_date)
async def date_handler(message: Message, state: FSMContext):
    user_id = message.from_user.id
    username = (
        message.from_user.username or f"{message.from_user.first_name} (ID: {user_id})"
    )

    import re

    if not re.match(r"^\d{2}\.\d{2}\.\d{4}$", message.text):
        await message.reply("‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ –î–î.–ú–ú.–ì–ì–ì–ì")
        return

    try:
        from datetime import datetime

        datetime.strptime(message.text, "%d.%m.%Y")
    except ValueError:
        await message.reply("‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é –¥–∞—Ç—É")
        return

    user_data[user_id]["date"] = message.text
    await log_message(f"–î–æ–±–∞–≤–∏–ª –¥–∞—Ç—É: {message.text}", user=username)
    await update_report_message(message, user_id)
    await state.clear()


@router.message(UserForm.waiting_for_address)
async def address_handler(message: Message, state: FSMContext):
    user_id = message.from_user.id
    user_data[user_id]["address"] = message.text
    await update_report_message(message, user_id)
    await state.clear()


@router.message(UserForm.waiting_for_materials)
async def materials_handler(message: Message, state: FSMContext):
    user_id = message.from_user.id
    user_data[user_id]["materials"] = message.text
    await delete_and_update(message, user_id)
    await state.clear()


@router.message(UserForm.waiting_for_recommendations)
async def recommendations_handler(message: Message, state: FSMContext):
    user_id = message.from_user.id
    user_data[user_id]["recommendations"] = message.text
    await delete_and_update(message, user_id)
    await state.clear()


@router.message(UserForm.waiting_for_defects)
async def defects_handler(message: Message, state: FSMContext):
    user_id = message.from_user.id
    user_data[user_id]["defects"] = message.text
    await delete_and_update(message, user_id)
    await state.clear()


@router.callback_query(F.data == "skip")
async def skip_handler(callback: types.CallbackQuery, state: FSMContext):
    user_id = callback.from_user.id
    current_state = await state.get_state()

    default_values = {
        "UserForm:waiting_for_classification": "",
        "UserForm:waiting_for_materials": "",
        "UserForm:waiting_for_recommendations": "",
        "UserForm:waiting_for_defects": "",
        "UserForm:waiting_for_additional_works": "",
    }

    if current_state in default_values:
        field_name = current_state.split(":")[1].replace("waiting_for_", "")
        user_data[user_id][field_name] = default_values[current_state]
        await delete_and_update(callback.message, user_id)
        await state.clear()

    await callback.answer()


@router.callback_query(F.data == "upload_works")
async def start_checklist(callback: types.CallbackQuery, state: FSMContext):
    user_id = callback.from_user.id
    username = (
        callback.from_user.username
        or f"{callback.from_user.first_name} (ID: {user_id})"
    )
    log_text = "–ù–∞—á–∞–ª –∑–∞–ø–æ–ª–Ω–µ–Ω–∏–µ —á–µ–∫-–ª–∏—Å—Ç–∞"
    await log_message(log_text, user=username)
    await state.update_data(current_work=0, completed_works=[])
    checklist_keyboard = InlineKeyboardMarkup(
        inline_keyboard=[
            [
                InlineKeyboardButton(text="‚úÖ –î–∞", callback_data="work_yes"),
                InlineKeyboardButton(text="‚ùå –ù–µ—Ç", callback_data="work_no"),
            ],
            [
                InlineKeyboardButton(
                    text="üìã –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è", callback_data="work_default"
                ),
            ],
        ]
    )
    try:
        await callback.message.edit_text(
            f"‚ùì {WORKS_LIST[0]}", reply_markup=checklist_keyboard
        )
        await state.set_state(UserForm.checklist)
    except Exception as e:
        error_text = f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ —á–µ–∫-–ª–∏—Å—Ç–∞: {str(e)}"
        await log_message(error_text, user=username)
        await callback.message.edit_text(
            "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ —á–µ–∫-–ª–∏—Å—Ç–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑."
        )


@router.callback_query(F.data == "generate_report")
async def generate_report_handler(callback: types.CallbackQuery):
    user_id = callback.from_user.id
    user = f"{callback.from_user.first_name} {callback.from_user.last_name} (ID: {user_id})"
    await callback.message.edit_text("üìù –°–æ–∑–¥–∞—é –¥–æ–∫—É–º–µ–Ω—Ç, –ø–æ–¥–æ–∂–¥–∏—Ç–µ –Ω–µ–º–Ω–æ–≥–æ...")

    try:
        output_file = await process_document(callback.message, user_id, callback)

        sent_message = await callback.message.answer_document(FSInputFile(output_file))

        await log_message("–î–æ–∫—É–º–µ–Ω—Ç —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω", user=user)

        os.remove(output_file)

        await callback.message.answer(
            "‚úÖ –û—Ç—á–µ—Ç —Å–æ–∑–¥–∞–Ω!\n–ù–∞–∂–º–∏—Ç–µ üìù –ù–æ–≤—ã–π –æ—Ç—á–µ—Ç –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –Ω–æ–≤–æ–≥–æ –æ—Ç—á–µ—Ç–∞",
            reply_markup=main_keyboard,
        )
    except Exception as e:
        error_text = f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –¥–æ–∫—É–º–µ–Ω—Ç–∞: {str(e)}"
        await log_message(error_text, user=user)
        await callback.message.edit_text(
            "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –¥–æ–∫—É–º–µ–Ω—Ç–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑."
        )


@router.callback_query(F.data.startswith("work_"))
async def process_work(callback: types.CallbackQuery, state: FSMContext):
    user_id = callback.from_user.id
    action = callback.data.split("_")[1]
    data = await state.get_data()
    current_work = data.get("current_work", 0)
    completed_works = data.get("completed_works", [])

    if action == "yes":
        completed_works.append(WORKS_LIST[current_work])
    elif action == "default":
        completed_works.extend(WORKS_LIST[current_work:])
        current_work = len(WORKS_LIST) - 1
    elif action == "no":
        pass

    current_work += 1
    await state.update_data(current_work=current_work, completed_works=completed_works)

    if current_work < len(WORKS_LIST):
        checklist_keyboard = InlineKeyboardMarkup(
            inline_keyboard=[
                [
                    InlineKeyboardButton(text="‚úÖ –î–∞", callback_data="work_yes"),
                    InlineKeyboardButton(text="‚ùå –ù–µ—Ç", callback_data="work_no"),
                ],
                [
                    InlineKeyboardButton(
                        text="üìã –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è", callback_data="work_default"
                    ),
                ],
            ]
        )
        await callback.message.edit_text(
            f"‚ùì {WORKS_LIST[current_work]}", reply_markup=checklist_keyboard
        )
    else:
        user_data[user_id]["works"] = completed_works
        await delete_and_update(callback.message, user_id)
        await state.clear()

    await callback.answer()


@router.callback_query(F.data == "finish_report")
async def finish_report_handler(callback: types.CallbackQuery):
    user_id = callback.from_user.id
    username = (
        callback.from_user.username
        or f"{callback.from_user.first_name} (ID: {callback.from_user.id})"
    )

    required_fields = [
        "photos",
        "date",
        "address",
        "classification",
        "materials",
        "recommendations",
        "defects",
        "works",
    ]
    missing_fields = [
        field for field in required_fields if field not in user_data.get(user_id, {})
    ]

    if missing_fields:
        missing_text = ", ".join(missing_fields)
        await callback.answer(
            f"‚ùå –ù–µ–æ–±—Ö–æ–¥–∏–º–æ –∑–∞–ø–æ–ª–Ω–∏—Ç—å: {missing_text}", show_alert=True
        )
        return

    await log_message("–ù–∞—á–∞–ª —Å–æ–∑–¥–∞–Ω–∏–µ –¥–æ–∫—É–º–µ–Ω—Ç–∞", user=username)
    await callback.message.edit_text("üìù –°–æ–∑–¥–∞—é –¥–æ–∫—É–º–µ–Ω—Ç, –ø–æ–¥–æ–∂–¥–∏—Ç–µ –Ω–µ–º–Ω–æ–≥–æ...")

    try:
        await process_document(callback.message, user_id, callback)
        await log_message("–î–æ–∫—É–º–µ–Ω—Ç —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω", user=username)
    except Exception as e:
        error_text = f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –¥–æ–∫—É–º–µ–Ω—Ç–∞: {str(e)}"
        await log_message(error_text, user=username)
        await callback.message.edit_text(
            "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –¥–æ–∫—É–º–µ–Ω—Ç–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑."
        )


@router.message(UserForm.waiting_for_additional_works)
async def additional_works_handler(message: Message, state: FSMContext):
    user_id = message.from_user.id
    user_data[user_id]["additional_works"] = message.text
    await delete_and_update(message, user_id)
    await state.clear()


async def process_document(
    message: Message, state: FSMContext, user_id: int, original_message=None
):
    try:
        if user_id not in user_data:
            raise ValueError("–î–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")

        username = (
            message.from_user.username
            or f"{message.from_user.first_name} (ID: {user_id})"
        )
        await log_message("–ù–∞—á–∞–ª —Å–æ–∑–¥–∞–Ω–∏–µ –¥–æ–∫—É–º–µ–Ω—Ç–∞", user=username)

        user_info = user_data[user_id]
        photos = user_info.get("photos", [])

        user_record = await db.get_user(user_id)
        if not user_record:
            await message.answer(
                "‚ùå –í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /start –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏."
            )
            await state.set_state(UserForm.waiting_for_last_name)
            return

        output_file = await generate_document(user_id, user_info)

        sent_message = await message.answer_document(FSInputFile(output_file))

        date = user_info.get("date")
        address = user_info.get("address")
        await db.add_report(user_id, sent_message.message_id, date, address)

        await log_message("–î–æ–∫—É–º–µ–Ω—Ç —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω", user=username)

        os.remove(output_file)
        if user_id in user_photos:
            del user_photos[user_id]
        if user_id in user_data:
            del user_data[user_id]

        await message.answer(
            "‚úÖ –û—Ç—á–µ—Ç —Å–æ–∑–¥–∞–Ω!\n–ù–∞–∂–º–∏—Ç–µ üìù –ù–æ–≤—ã–π –æ—Ç—á–µ—Ç –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –Ω–æ–≤–æ–≥–æ –æ—Ç—á–µ—Ç–∞",
            reply_markup=main_keyboard,
        )
    except ValueError as ve:
        await message.answer(str(ve))
    except Exception as e:
        await message.answer(f"‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {str(e)}")


@router.message(F.text == "üìä –ü—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å –æ—Ç—á–µ—Ç—ã")
async def view_reports_handler(message: Message):
    user = message.from_user.username or message.from_user.id
    await log_message(f"[USER: {user}] [LOG] - –ù–∞—á–∞–ª –ø—Ä–æ—Å–º–æ—Ç—Ä –æ—Ç—á–µ—Ç–æ–≤")

    keyboard = InlineKeyboardMarkup(
        inline_keyboard=[
            [
                InlineKeyboardButton(text="–ü–æ –¥–∞—Ç–µ", callback_data="view_by_date"),
                InlineKeyboardButton(text="–ü–æ –Ω–æ–º–µ—Ä—É", callback_data="view_by_number"),
            ]
        ]
    )
    await message.reply("–í—ã–±–µ—Ä–∏—Ç–µ —Å–ø–æ—Å–æ–± –ø–æ–∏—Å–∫–∞ –æ—Ç—á–µ—Ç–æ–≤:", reply_markup=keyboard)


@router.callback_query(F.data == "view_by_date")
async def view_reports_by_date(callback: types.CallbackQuery, state: FSMContext):
    user = callback.from_user.username or callback.from_user.id
    await log_message(f"[USER: {user}] [LOG] - –í—ã–±—Ä–∞–ª –ø—Ä–æ—Å–º–æ—Ç—Ä –æ—Ç—á–µ—Ç–æ–≤ –ø–æ –¥–∞—Ç–µ")

    keyboard = InlineKeyboardMarkup(
        inline_keyboard=[
            [
                InlineKeyboardButton(
                    text="–í—Å–µ –∑–∞ –≤—á–µ—Ä–∞", callback_data="view_yesterday"
                ),
                InlineKeyboardButton(text="–í—Å–µ –∑–∞ —Å–µ–≥–æ–¥–Ω—è", callback_data="view_today"),
            ]
        ]
    )
    await callback.message.edit_text(
        "–í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É '–æ—Ç' –≤ —Ñ–æ—Ä–º–∞—Ç–µ –î–î.–ú–ú.–ì–ì–ì–ì, –ª–∏–±–æ –≤—ã–±–µ—Ä–∏—Ç–µ –Ω–∏–∂–µ:",
        reply_markup=keyboard,
    )
    await state.set_state(UserForm.waiting_for_start_date)
    await callback.answer()


@router.callback_query(F.data == "view_yesterday")
async def view_reports_yesterday(callback: types.CallbackQuery):
    user = callback.from_user.username or callback.from_user.id
    await log_message(f"[USER: {user}] [LOG] - –ó–∞–ø—Ä–æ—Å–∏–ª –æ—Ç—á–µ—Ç—ã –∑–∞ –≤—á–µ—Ä–∞")

    user_id = callback.from_user.id
    yesterday = (datetime.now() - timedelta(days=1)).strftime("%d.%m.%Y")

    report_ids = await db.get_reports(user_id, yesterday, yesterday)
    await send_reports(callback.message, report_ids)
    await callback.answer()


@router.callback_query(F.data == "view_today")
async def view_reports_today(callback: types.CallbackQuery):
    user = callback.from_user.username or callback.from_user.id
    await log_message(f"[USER: {user}] [LOG] - –ó–∞–ø—Ä–æ—Å–∏–ª –æ—Ç—á–µ—Ç—ã –∑–∞ —Å–µ–≥–æ–¥–Ω—è")

    user_id = callback.from_user.id
    today = datetime.now().strftime("%d.%m.%Y")

    report_ids = await db.get_reports(user_id, today, today)
    await send_reports(callback.message, report_ids)
    await callback.answer()


@router.message(UserForm.waiting_for_start_date)
async def start_date_handler(message: Message, state: FSMContext):
    user = message.from_user.username or message.from_user.id
    await log_message(f"[USER: {user}] [LOG] - –í–≤–æ–¥–∏—Ç –Ω–∞—á–∞–ª—å–Ω—É—é –¥–∞—Ç—É –æ—Ç—á–µ—Ç–∞")

    start_date = message.text.strip()
    if not validate_date(start_date):
        await message.reply(
            "‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é –¥–∞—Ç—É '–æ—Ç' –≤ —Ñ–æ—Ä–º–∞—Ç–µ –î–î.–ú–ú.–ì–ì–ì–ì:"
        )
        return

    await state.update_data(start_date=start_date)
    await message.reply("–í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É '–¥–æ' –≤ —Ñ–æ—Ä–º–∞—Ç–µ –î–î.–ú–ú.–ì–ì–ì–ì:")
    await state.set_state(UserForm.waiting_for_end_date)


@router.message(UserForm.waiting_for_end_date)
async def end_date_handler(message: Message, state: FSMContext):
    user = message.from_user.username or message.from_user.id
    await log_message(f"[USER: {user}] [LOG] - –í–≤–æ–¥–∏—Ç –∫–æ–Ω–µ—á–Ω—É—é –¥–∞—Ç—É –æ—Ç—á–µ—Ç–∞")

    end_date = message.text.strip()
    user_data_state = await state.get_data()
    start_date = user_data_state.get("start_date")

    if not validate_date(end_date):
        await message.reply(
            "‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é –¥–∞—Ç—É '–¥–æ' –≤ —Ñ–æ—Ä–º–∞—Ç–µ –î–î.–ú–ú.–ì–ì–ì–ì:"
        )
        return

    report_ids = await db.get_reports(message.from_user.id, start_date, end_date)
    await send_reports(message, report_ids)
    await state.clear()


@router.callback_query(F.data == "view_by_number")
async def view_reports_by_address(callback: types.CallbackQuery, state: FSMContext):
    user = callback.from_user.username or callback.from_user.id
    await log_message(f"[USER: {user}] [LOG] - –í—ã–±—Ä–∞–ª –ø—Ä–æ—Å–º–æ—Ç—Ä –æ—Ç—á–µ—Ç–æ–≤ –ø–æ –Ω–æ–º–µ—Ä—É")

    await callback.message.edit_text("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –¥–ª—è –ø–æ–∏—Å–∫–∞ –æ—Ç—á–µ—Ç–æ–≤:")
    await state.set_state(UserForm.waiting_for_address_search)
    await callback.answer()


@router.message(UserForm.waiting_for_address_search)
async def number_search_handler(message: Message, state: FSMContext):
    user = message.from_user.username or message.from_user.id
    await log_message(f"[USER: {user}] [LOG] - –í—ã–ø–æ–ª–Ω—è–µ—Ç –ø–æ–∏—Å–∫ –æ—Ç—á–µ—Ç–æ–≤ –ø–æ –Ω–æ–º–µ—Ä—É")

    number = message.text.strip()
    user_id = message.from_user.id

    report_ids = await db.get_reports_by_number(user_id, number)
    if report_ids:
        for report_id in report_ids:
            try:
                await message.bot.forward_message(
                    chat_id=user_id,
                    from_chat_id=message.chat.id,
                    message_id=report_id[0],
                )
            except Exception as e:
                await message.reply(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–µ—Ä–µ—Å–ª–∞—Ç—å –æ—Ç—á–µ—Ç: {str(e)}")
    else:
        await message.reply("üìÑ –ù–µ—Ç –æ—Ç—á–µ—Ç–æ–≤ —Å —É–∫–∞–∑–∞–Ω–Ω—ã–º –Ω–æ–º–µ—Ä–æ–º.")

    await state.clear()


async def send_reports(message, report_ids):
    user = message.chat.username or message.chat.id
    await log_message(f"[USER: {user}] [LOG] - –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –æ—Ç—á–µ—Ç—ã")

    user_id = message.chat.id
    if report_ids:
        for report_id in report_ids:
            try:
                await message.bot.forward_message(
                    chat_id=user_id,
                    from_chat_id=message.chat.id,
                    message_id=report_id[0],
                )
            except Exception as e:
                await message.reply(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ—Å—ã–ª–∫–µ –æ—Ç—á–µ—Ç–∞: {str(e)}")
    else:
        await message.reply("üìÑ –ù–µ—Ç –æ—Ç—á–µ—Ç–æ–≤ –∑–∞ —É–∫–∞–∑–∞–Ω–Ω—ã–π –ø–µ—Ä–∏–æ–¥.")


def validate_date(date_str):
    if not re.match(r"^\d{2}\.\d{2}\.\d{4}$", date_str):
        return False
    try:
        datetime.strptime(date_str, "%d.%m.%Y")
        return True
    except ValueError:
        return False


async def fetch_reports(user_id, start_date, end_date):
    reports = await db.get_reports(user_id, start_date, end_date)

    if not reports:
        return []

    report_files = []
    for report in reports:
        report_file_path = report["file_path"]
        report_files.append(report_file_path)

    return report_files
