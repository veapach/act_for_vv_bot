from aiogram import Router, F, types
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.types import (
    Message,
    ReplyKeyboardMarkup,
    KeyboardButton,
    InlineKeyboardMarkup,
    InlineKeyboardButton,
)
from config import user_photos, user_data, log_message
from document_generator import generate_document
from aiogram.types import FSInputFile
import os

done_button = KeyboardButton(text="–ì–æ—Ç–æ–≤–æ ‚úÖ")
keyboard = ReplyKeyboardMarkup(keyboard=[[done_button]], resize_keyboard=True)

skip_button = InlineKeyboardButton(text="–ü—Ä–æ–ø—É—Å–∫", callback_data="skip")
skip_keyboard = InlineKeyboardMarkup(inline_keyboard=[[skip_button]])

checklist_keyboard = InlineKeyboardMarkup(
    inline_keyboard=[
        [
            InlineKeyboardButton(text="‚úÖ –î–∞", callback_data="work_yes"),
            InlineKeyboardButton(text="‚ùå –ù–µ—Ç", callback_data="work_no"),
        ],
        [
            InlineKeyboardButton(
                text="üìã –û—Å—Ç–∞–≤–∏—Ç—å —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è", callback_data="work_default"
            ),
        ],
    ]
)

router = Router()


class UserForm(StatesGroup):
    waiting_for_address = State()
    classification = State()
    materials = State()
    recommendations = State()
    defects = State()
    checklist = State()


WORKS_LIST = [
    "–ï–∂–µ–º–µ—Å—è—á–Ω—ã–π —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–π –æ—Å–º–æ—Ç—Ä –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏—è –Ω–∞ –ø—Ä–µ–¥–º–µ—Ç –µ–≥–æ —Ä–∞–±–æ—Ç–æ—Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–∏",
    "–î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –Ω–µ–∏—Å–ø—Ä–∞–≤–Ω–æ–≥–æ –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏—è –Ω–∞ –ø—Ä–µ–¥–º–µ—Ç –ø—Ä–æ–≤–µ–¥–µ–Ω–∏—è –µ–≥–æ —Ä–µ–º–æ–Ω—Ç–∞",
    "–ü—Ä–æ–≤–µ—Ä–∫–∞ –∫—Ä–µ–ø–ª–µ–Ω–∏—è —Ç–µ—Ä–º–æ—Å—Ç–∞—Ç–æ–≤, —Å–∏–≥–Ω–∞–ª—å–Ω–æ–π –∞—Ä–º–∞—Ç—É—Ä—ã, –¥–≤–µ—Ä–µ–π –∏ –æ–±–ª–∏—Ü–æ–≤–∫–∏",
    "–ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–¥–µ–∂–Ω–æ—Å—Ç–∏ –∫—Ä–µ–ø–ª–µ–Ω–∏—è –∑–∞–∑–µ–º–ª–µ–Ω–∏—è –∏ –æ—Ç—Å—É—Ç—Å—Ç–≤–∏—è –º–µ—Ö–∞–Ω–∏—á–µ—Å–∫–∏—Ö –ø–æ–≤—Ä–µ–∂–¥–µ–Ω–∏–π –ø—Ä–æ–≤–æ–¥–æ–≤",
    "–ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–±–æ—Ç—ã –ø—Ä–æ–≥—Ä–∞–º–º–Ω—ã—Ö —É—Å—Ç—Ä–æ–π—Å—Ç–≤",
    "–ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–≥—Ä–µ–≤–∞—Ç–µ–ª—å–Ω—ã—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤, —Å–æ–ª–µ–Ω–æ–∏–¥–Ω—ã—Ö –∫–ª–∞–ø–∞–Ω–æ–≤",
    "–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è —ç–ª–µ–∫—Ç—Ä–æ–∞–ø–ø–∞—Ä–∞—Ç—É—Ä—ã, –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏ –∑–∞—Ç—è–∂–∫–∞ —ç–ª–µ–∫—Ç—Ä–æ–∫–æ–Ω—Ç–∞–∫—Ç–Ω—ã—Ö —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π, –∑–∞–º–µ–Ω–∞ —Å–≥–æ—Ä–µ–≤—à–∏—Ö –ø–ª–∞–≤–∫–∏—Ö –≤—Å—Ç–∞–≤–æ–∫",
    "–ö–æ–Ω—Ç—Ä–æ–ª—å —Å–∏–ª—ã —Ç–æ–∫–∞ –≤ –∫–∞–∂–¥–æ–π –∏–∑ —Ñ–∞–∑ –∏ –º–µ–∂—Ñ–∞–∑–Ω—ã—Ö –Ω–∞–ø—Ä—è–∂–µ–Ω–∏–π",
    "–ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –º–∏–∫—Ä–æ–ø—Ä–æ—Ü–µ—Å—Å–æ—Ä–æ–≤",
]


@router.message(F.text == "/start")
async def start_handler(message: Message):
    await message.reply(
        "–ü—Ä–∏–≤–µ—Ç! –û—Ç–ø—Ä–∞–≤—å –º–Ω–µ –Ω–µ—Å–∫–æ–ª—å–∫–æ —Ñ–æ—Ç–æ, –∏ —è –≤—Å—Ç–∞–≤–ª—é –∏—Ö –≤ –æ—Ç—á–µ—Ç. –ö–æ–≥–¥–∞ –∑–∞–∫–æ–Ω—á–∏—à—å, –Ω–∞–∂–º–∏ –∫–Ω–æ–ø–∫—É <b>–ì–æ—Ç–æ–≤–æ</b>.",
        parse_mode="HTML",
    )
    log_message("üë§ –ó–∞–ø—Ä–æ—Å –æ—Ç –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è", message)


@router.message(F.photo)
async def photo_handler(message: Message):
    user_id = message.from_user.id

    if user_id not in user_photos:
        user_photos[user_id] = []

    highest_quality_photo = max(message.photo, key=lambda p: p.file_size)
    user_photos[user_id].append(highest_quality_photo.file_id)

    if len(user_photos[user_id]) == 1:
        await message.reply(
            "üì∏ –§–æ—Ç–æ –ø–æ–ª—É—á–µ–Ω–æ! –û—Ç–ø—Ä–∞–≤—å –µ—â—ë –∏–ª–∏ –Ω–∞–∂–º–∏ –∫–Ω–æ–ø–∫—É <b>–ì–æ—Ç–æ–≤–æ</b>, —á—Ç–æ–±—ã –∑–∞–≤–µ—Ä—à–∏—Ç—å.",
            reply_markup=keyboard,
            parse_mode="HTML",
        )
        log_message("üì∑ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ—Ç–ø—Ä–∞–≤–∏–ª —Ñ–æ—Ç–æ", message)


@router.message(F.text == "–ì–æ—Ç–æ–≤–æ ‚úÖ")
async def done_handler(message: Message, state: FSMContext):
    user_id = message.from_user.id

    if user_id not in user_photos or not user_photos[user_id]:
        await message.reply(
            "‚ö†Ô∏è –í—ã –µ—â—ë –Ω–µ –æ—Ç–ø—Ä–∞–≤–∏–ª–∏ –Ω–∏ –æ–¥–Ω–æ–π —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏.", parse_mode="HTML"
        )
        return

    await message.reply(
        "üìÖ –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ –î–î.–ú–ú.–ì–ì–ì–ì:", parse_mode="HTML"
    )
    log_message("üñºÔ∏è –§–æ—Ç–æ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã", message)

    user_data[user_id] = {"photos": user_photos[user_id]}
    await state.set_state(UserForm.classification)


@router.message(F.text.regexp(r"\d{2}\.\d{2}\.\d{4}"))
async def date_handler(message: Message, state: FSMContext):
    user_id = message.from_user.id

    if user_id not in user_data:
        await message.reply(
            "‚ö†Ô∏è –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–Ω–∞—á–∞–ª–∞ –Ω–∞–∂–º–∏—Ç–µ '–ì–æ—Ç–æ–≤–æ ‚úÖ'.", parse_mode="HTML"
        )
        return

    user_data[user_id]["date"] = message.text
    await message.reply("üìç –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∞–¥—Ä–µ—Å:", parse_mode="HTML")
    log_message("üìÖ –î–∞—Ç–∞ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞", message)
    await state.set_state(UserForm.waiting_for_address)


@router.message(UserForm.waiting_for_address)
async def address_handler(message: Message, state: FSMContext):
    user_id = message.from_user.id

    user_data[user_id]["address"] = message.text
    await message.reply(
        "üè∑Ô∏è –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏—é –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ '–ü—Ä–æ–ø—É—Å–∫', —á—Ç–æ–±—ã –æ—Å—Ç–∞–≤–∏—Ç—å '–ü–µ—á—å':",
        reply_markup=skip_keyboard,
        parse_mode="HTML",
    )
    log_message(
        "üìç –ê–¥—Ä–µ—Å –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω, –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç—Å—è –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏—è", message
    )
    await state.set_state(UserForm.classification)


@router.message(UserForm.classification)
async def classification_handler(message: Message, state: FSMContext):
    user_id = message.from_user.id

    user_data[user_id]["classification"] = message.text
    await message.reply(
        "üõ†Ô∏è –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –º–∞—Ç–µ—Ä–∏–∞–ª—ã, –ø—Ä–∏–º–µ–Ω—è–µ–º—ã–µ –ø—Ä–∏ –¢–û, –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ '–ü—Ä–æ–ø—É—Å–∫':",
        reply_markup=skip_keyboard,
        parse_mode="HTML",
    )
    log_message("üè∑Ô∏è –ö–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏—è –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞", message)
    await state.set_state(UserForm.materials)


@router.message(UserForm.materials)
async def materials_handler(message: Message, state: FSMContext):
    user_id = message.from_user.id

    user_data[user_id]["materials"] = message.text
    await message.reply(
        "üí° –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ '–ü—Ä–æ–ø—É—Å–∫':",
        reply_markup=skip_keyboard,
        parse_mode="HTML",
    )
    log_message("üõ†Ô∏è –ú–∞—Ç–µ—Ä–∏–∞–ª—ã –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã", message)
    await state.set_state(UserForm.recommendations)


@router.message(UserForm.recommendations)
async def recommendations_handler(message: Message, state: FSMContext):
    user_id = message.from_user.id

    user_data[user_id]["recommendations"] = message.text
    await message.reply(
        "üîç –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –≤—ã—è–≤–ª–µ–Ω–Ω—ã–µ –¥–µ—Ñ–µ–∫—Ç—ã –ø—Ä–∏ –¢–û –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ '–ü—Ä–æ–ø—É—Å–∫':",
        reply_markup=skip_keyboard,
        parse_mode="HTML",
    )
    log_message("üí° –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã", message)
    await state.set_state(UserForm.defects)


@router.callback_query(F.data == "skip")
async def skip_handler(callback_query: types.CallbackQuery, state: FSMContext):
    user_id = callback_query.from_user.id
    message = callback_query.message

    if user_id not in user_data:
        await message.answer(
            "‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: –¥–∞–Ω–Ω—ã–µ —Å–µ—Å—Å–∏–∏ —É—Ç–µ—Ä—è–Ω—ã. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞—á–Ω–∏—Ç–µ –∑–∞–Ω–æ–≤–æ.",
            parse_mode="HTML",
        )
        await state.clear()
        return

    current_state = await state.get_state()

    try:
        if current_state == UserForm.classification.state:
            user_data[user_id]["classification"] = "–ü–µ—á—å"
            await message.answer(
                "üõ†Ô∏è –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –º–∞—Ç–µ—Ä–∏–∞–ª—ã, –ø—Ä–∏–º–µ–Ω—è–µ–º—ã–µ –ø—Ä–∏ –¢–û, –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ '–ü—Ä–æ–ø—É—Å–∫':",
                reply_markup=skip_keyboard,
                parse_mode="HTML",
            )
            log_message(
                "üè∑Ô∏è –ö–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏—è –ø—Ä–æ–ø—É—â–µ–Ω–∞, –∑–∞–ø—Ä–∞—à–∏–≤–∞—é—Ç—Å—è –º–∞—Ç–µ—Ä–∏–∞–ª—ã", callback_query
            )
            await state.set_state(UserForm.materials)
        elif current_state == UserForm.materials.state:
            user_data[user_id]["materials"] = ""
            await message.answer(
                "üí° –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ '–ü—Ä–æ–ø—É—Å–∫':",
                reply_markup=skip_keyboard,
                parse_mode="HTML",
            )
            log_message(
                "üõ†Ô∏è –ú–∞—Ç–µ—Ä–∏–∞–ª—ã –ø—Ä–æ–ø—É—â–µ–Ω—ã, –∑–∞–ø—Ä–∞—à–∏–≤–∞—é—Ç—Å—è —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏", callback_query
            )
            await state.set_state(UserForm.recommendations)
        elif current_state == UserForm.recommendations.state:
            user_data[user_id]["recommendations"] = ""
            await message.answer(
                "üîç –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –≤—ã—è–≤–ª–µ–Ω–Ω—ã–µ –¥–µ—Ñ–µ–∫—Ç—ã –ø—Ä–∏ –¢–û –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ '–ü—Ä–æ–ø—É—Å–∫':",
                reply_markup=skip_keyboard,
                parse_mode="HTML",
            )
            log_message(
                "üí° –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø—Ä–æ–ø—É—â–µ–Ω—ã, –∑–∞–ø—Ä–∞—à–∏–≤–∞—é—Ç—Å—è –¥–µ—Ñ–µ–∫—Ç—ã", callback_query
            )
            await state.set_state(UserForm.defects)
        elif current_state == UserForm.defects.state:
            user_data[user_id]["defects"] = ""
            log_message(
                "üîç –î–µ—Ñ–µ–∫—Ç—ã –ø—Ä–æ–ø—É—â–µ–Ω—ã, –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è –∑–∞–ø–æ–ª–Ω–µ–Ω–∏–µ —á–µ–∫-–ª–∏—Å—Ç–∞", callback_query
            )

            await message.answer(
                "üìã –ó–∞–ø–æ–ª–Ω—è–µ–º —á–µ–∫-–ª–∏—Å—Ç –æ –ø—Ä–æ–≤–µ–¥–µ–Ω–Ω—ã—Ö —Ä–∞–±–æ—Ç–∞—Ö", parse_mode="HTML"
            )

            await state.update_data(current_work=0, completed_works=[])

            sent_message = await message.answer(
                f"‚ùì {WORKS_LIST[0]}",
                reply_markup=checklist_keyboard,
                parse_mode="HTML",
            )

            await state.update_data(message_id=sent_message.message_id)
            await state.set_state(UserForm.checklist)

        await callback_query.answer()
    except Exception as e:
        log_message(f"‚ùå –û—à–∏–±–∫–∞ –≤ skip_handler: {str(e)}", callback_query)
        await message.answer(f"‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {str(e)}", parse_mode="HTML")


@router.message(UserForm.defects)
async def defects_handler(message: Message, state: FSMContext):
    user_id = message.from_user.id
    user_data[user_id]["defects"] = message.text

    await message.reply(
        "üìã –ó–∞–ø–æ–ª–Ω—è–µ–º —á–µ–∫-–ª–∏—Å—Ç –æ –ø—Ä–æ–≤–µ–¥–µ–Ω–Ω—ã—Ö —Ä–∞–±–æ—Ç–∞—Ö", parse_mode="HTML"
    )

    await state.update_data(current_work=0, completed_works=[])

    sent_message = await message.answer(
        f"‚ùì {WORKS_LIST[0]}", reply_markup=checklist_keyboard, parse_mode="HTML"
    )

    await state.update_data(message_id=sent_message.message_id)
    await state.set_state(UserForm.checklist)
    log_message("üìã –ù–∞—á–∞—Ç–æ –∑–∞–ø–æ–ª–Ω–µ–Ω–∏–µ —á–µ–∫-–ª–∏—Å—Ç–∞ —Ä–∞–±–æ—Ç", message)


@router.callback_query(lambda c: c.data in ["work_yes", "work_no", "work_default"])
async def process_work_step(callback_query: types.CallbackQuery, state: FSMContext):
    user_id = callback_query.from_user.id
    current_data = await state.get_data()

    current_work = current_data.get("current_work", 0)
    completed_works = current_data.get("completed_works", [])

    if callback_query.data == "work_default":
        completed_works = list(range(1, len(WORKS_LIST) + 1))
        await callback_query.message.edit_text(
            "üìù –°–æ–∑–¥–∞—é –¥–æ–∫—É–º–µ–Ω—Ç, –ø–æ–¥–æ–∂–¥–∏—Ç–µ –Ω–µ–º–Ω–æ–≥–æ...", parse_mode="HTML"
        )
        user_data[user_id]["works"] = "\n".join(
            [f"{i}. {WORKS_LIST[num-1]}" for i, num in enumerate(completed_works, 1)]
        )
        await process_document(callback_query.message, user_id, callback_query)
        await callback_query.message.edit_text("‚úÖ –ì–æ—Ç–æ–≤–æ!", parse_mode="HTML")
        await state.clear()
        await callback_query.answer()
        return

    if callback_query.data == "work_yes":
        completed_works.append(current_work + 1)

    current_work += 1

    if current_work < len(WORKS_LIST):
        next_keyboard = InlineKeyboardMarkup(
            inline_keyboard=[
                [
                    InlineKeyboardButton(text="‚úÖ –î–∞", callback_data="work_yes"),
                    InlineKeyboardButton(text="‚ùå –ù–µ—Ç", callback_data="work_no"),
                ]
            ]
        )

        await callback_query.message.edit_text(
            f"‚ùì {WORKS_LIST[current_work]}", reply_markup=next_keyboard
        )
        await state.update_data(
            current_work=current_work, completed_works=completed_works
        )
    else:
        await callback_query.message.edit_text(
            "üìù –°–æ–∑–¥–∞—é –¥–æ–∫—É–º–µ–Ω—Ç, –ø–æ–¥–æ–∂–¥–∏—Ç–µ –Ω–µ–º–Ω–æ–≥–æ...", parse_mode="HTML"
        )

        if completed_works:
            works_text = "\n".join(
                [
                    f"{i}. {WORKS_LIST[num-1]}"
                    for i, num in enumerate(completed_works, 1)
                ]
            )
        else:
            works_text = "–†–∞–±–æ—Ç—ã –Ω–µ –ø—Ä–æ–≤–æ–¥–∏–ª–∏—Å—å"

        user_data[user_id]["works"] = works_text
        await process_document(callback_query.message, user_id, callback_query)
        await callback_query.message.edit_text("‚úÖ –ì–æ—Ç–æ–≤–æ!", parse_mode="HTML")
        await state.clear()

    await callback_query.answer()


async def process_document(message: Message, user_id: int, original_message=None):
    try:
        if user_id not in user_data:
            raise ValueError("–î–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")

        log_msg = original_message if original_message else message
        await message.answer("üëá –í–∞—à –æ—Ç—á–µ—Ç", parse_mode="HTML")

        output_file = await generate_document(user_id, user_data[user_id])
        await message.answer_document(FSInputFile(output_file))
        log_message(
            "üìÑ –ì–æ—Ç–æ–≤—ã–π –æ—Ç—á–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é", original_message or message
        )

        os.remove(output_file)
        del user_photos[user_id]
        del user_data[user_id]
    except Exception as e:
        error_msg = f"‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {str(e)}\n"
        error_msg += f"–¢–µ–∫—É—â–∏–µ –¥–∞–Ω–Ω—ã–µ: {user_data.get(user_id, '–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö')}"
        await message.answer(error_msg, parse_mode="HTML")
        log_message(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –¥–æ–∫—É–º–µ–Ω—Ç–∞: {str(e)}", log_msg)
